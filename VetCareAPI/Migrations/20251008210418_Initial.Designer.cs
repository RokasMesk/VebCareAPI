// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VetCareAPI.Data;

#nullable disable

namespace VetCareAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251008210418_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("VetCareAPI.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Email = "rokas@example.com",
                            FullName = "Rokas Meškauskas"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-333333333333"),
                            Email = "auste@example.com",
                            FullName = "Austė Petrauskaitė"
                        });
                });

            modelBuilder.Entity("VetCareAPI.Models.Clinic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Clinics");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Address = "Laisvės al. 1",
                            City = "Kaunas",
                            Name = "ZooVet Kaunas"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-222222222222"),
                            Address = "Gedimino pr. 2",
                            City = "Vilnius",
                            Name = "VetHelp Vilnius"
                        });
                });

            modelBuilder.Entity("VetCareAPI.Models.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Pets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-111111111111"),
                            Name = "Maksis",
                            Species = "Dog",
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-222222222222"),
                            Name = "Murka",
                            Species = "Cat",
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Name = "Pūkis",
                            Species = "Rabbit",
                            UserId = new Guid("22222222-2222-2222-2222-333333333333")
                        });
                });

            modelBuilder.Entity("VetCareAPI.Models.Visit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ChiefComplaint")
                        .HasColumnType("longtext");

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("char(36)");

                    b.Property<string>("DiagnosisCode")
                        .HasColumnType("longtext");

                    b.Property<string>("DiagnosisText")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EndsAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<Guid>("PetId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Reason")
                        .HasColumnType("int");

                    b.Property<int?>("Severity")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("PetId");

                    b.ToTable("Visits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-111111111111"),
                            ClinicId = new Guid("11111111-1111-1111-1111-111111111111"),
                            EndsAt = new DateTime(2025, 9, 15, 9, 30, 0, 0, DateTimeKind.Utc),
                            Notes = "Vaccination completed.",
                            PetId = new Guid("33333333-3333-3333-3333-111111111111"),
                            Reason = 1,
                            Severity = 0,
                            StartsAt = new DateTime(2025, 9, 15, 9, 0, 0, 0, DateTimeKind.Utc),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-222222222222"),
                            ChiefComplaint = "Limping on right hind leg",
                            ClinicId = new Guid("11111111-1111-1111-1111-111111111111"),
                            EndsAt = new DateTime(2025, 10, 12, 9, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Annual check.",
                            PetId = new Guid("33333333-3333-3333-3333-111111111111"),
                            Reason = 0,
                            Severity = 1,
                            StartsAt = new DateTime(2025, 10, 12, 8, 30, 0, 0, DateTimeKind.Utc),
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-333333333333"),
                            ChiefComplaint = "Bad breath",
                            ClinicId = new Guid("11111111-1111-1111-1111-222222222222"),
                            EndsAt = new DateTime(2025, 10, 20, 14, 30, 0, 0, DateTimeKind.Utc),
                            Notes = "Dental check.",
                            PetId = new Guid("33333333-3333-3333-3333-222222222222"),
                            Reason = 5,
                            Severity = 0,
                            StartsAt = new DateTime(2025, 10, 20, 14, 0, 0, 0, DateTimeKind.Utc),
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            ChiefComplaint = "Loss of appetite",
                            ClinicId = new Guid("11111111-1111-1111-1111-222222222222"),
                            EndsAt = new DateTime(2025, 10, 5, 16, 30, 0, 0, DateTimeKind.Utc),
                            Notes = "Owner cancelled day before.",
                            PetId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Reason = 2,
                            Severity = 1,
                            StartsAt = new DateTime(2025, 10, 5, 16, 0, 0, 0, DateTimeKind.Utc),
                            Status = 2
                        });
                });

            modelBuilder.Entity("VetCareAPI.Models.Pet", b =>
                {
                    b.HasOne("VetCareAPI.Models.AppUser", "User")
                        .WithMany("Pets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VetCareAPI.Models.Visit", b =>
                {
                    b.HasOne("VetCareAPI.Models.Clinic", "Clinic")
                        .WithMany("Visits")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VetCareAPI.Models.Pet", "Pet")
                        .WithMany("Visits")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("VetCareAPI.Models.AppUser", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("VetCareAPI.Models.Clinic", b =>
                {
                    b.Navigation("Visits");
                });

            modelBuilder.Entity("VetCareAPI.Models.Pet", b =>
                {
                    b.Navigation("Visits");
                });
#pragma warning restore 612, 618
        }
    }
}
